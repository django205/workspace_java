package datastructurres;
import java.util.*;
public class ReverseLinkedList {
	Node head;
	class Node{
		int data;
		Node next;
		Node(int d){
			data=d;
			next=null;
		}
	}
	
	void push(int newdata){
		Node newNode=new Node(newdata);
		newNode.next=head;
		head=newNode;
	}
	void insertAfter(Node prev,int data){
		if(prev==null){
			System.out.println("prev node can't be null");
		return;
		}
		
	Node newNode=new Node(data);
	newNode.next=prev.next;
	prev.next=newNode;
	}
	
	void append(int data){
		if(head==null){
			head=new Node(data);
			return;
		}
		
		Node temp=head;
		Node newNode=new Node(data);
		while(temp.next!=null){
			temp=temp.next;
			
		}
		newNode.next=null;
		temp.next=newNode;
	}
	void printList(Node head){
		Node n=head;
		while(n!=null){
			n=n.next;
			System.out.println(n.data);
		}
		
	}
	void delete(int key){
		Node temp=head;
		while(temp.next!=null&&temp.data==key){
			temp=temp.next;
			
		}
		
		
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LinkedList ll=new LinkedList();
		ll.append(1);
		ll.append(2);
		ll.append(3);
		ll.append(4);
		ll.append(5);
		ll.printlist();
	}

}
